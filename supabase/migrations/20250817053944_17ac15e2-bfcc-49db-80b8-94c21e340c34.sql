-- Notifications reliability improvements: triggers and indexes
-- 1) Message notifications on new messages
CREATE OR REPLACE FUNCTION public.create_message_notification()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  sender_username text;
BEGIN
  SELECT username INTO sender_username FROM public.profiles WHERE id = NEW.sender_id;

  INSERT INTO public.notifications (
    user_id, type, title, content, reference_id, reference_data
  )
  VALUES (
    NEW.receiver_id,
    'message',
    'New Message',
    COALESCE(sender_username, 'Someone') || ' sent you a message',
    NEW.id,
    jsonb_build_object(
      'message_id', NEW.id,
      'sender_id', NEW.sender_id,
      'receiver_id', NEW.receiver_id,
      'preview', left(NEW.content, 120),
      'reference_item_id', NEW.reference_item_id
    )
  );
  RETURN NEW;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_create_message_notification'
  ) THEN
    CREATE TRIGGER trg_create_message_notification
    AFTER INSERT ON public.messages
    FOR EACH ROW EXECUTE FUNCTION public.create_message_notification();
  END IF;
END;
$$;

-- 2) Badge notifications when a badge is awarded
CREATE OR REPLACE FUNCTION public.trigger_create_badge_notifications()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Call existing helper to notify recipient and followers
  PERFORM public.create_badge_notifications(NEW.user_id, ARRAY[NEW.badge_id]);
  RETURN NEW;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_user_badges_create_notification'
  ) THEN
    CREATE TRIGGER trg_user_badges_create_notification
    AFTER INSERT ON public.user_badges
    FOR EACH ROW EXECUTE FUNCTION public.trigger_create_badge_notifications();
  END IF;
END;
$$;

-- 3) Follow notifications (create on follow, delete on unfollow) using existing functions
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_create_follow_notification') THEN
    CREATE TRIGGER trg_create_follow_notification
    AFTER INSERT ON public.followers
    FOR EACH ROW EXECUTE FUNCTION public.create_follow_notification();
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_delete_follow_notification') THEN
    CREATE TRIGGER trg_delete_follow_notification
    AFTER DELETE ON public.followers
    FOR EACH ROW EXECUTE FUNCTION public.delete_follow_notification();
  END IF;
END;$$;

-- 4) Forum post notifications for followers (create and cleanup) using existing functions
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_create_forum_post_notification') THEN
    CREATE TRIGGER trg_create_forum_post_notification
    AFTER INSERT ON public.forum_posts
    FOR EACH ROW EXECUTE FUNCTION public.create_forum_post_notification();
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_delete_forum_post_notifications') THEN
    CREATE TRIGGER trg_delete_forum_post_notifications
    AFTER DELETE ON public.forum_posts
    FOR EACH ROW EXECUTE FUNCTION public.delete_forum_post_notifications();
  END IF;
END;$$;

-- 5) Blog post notifications for followers (new - mirrors forum behavior)
CREATE OR REPLACE FUNCTION public.create_blog_post_notification()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  author_username text;
  follower_record RECORD;
BEGIN
  SELECT username INTO author_username FROM public.profiles WHERE id = NEW.author_id;

  FOR follower_record IN
    SELECT follower_id
    FROM public.followers
    WHERE following_id = NEW.author_id
  LOOP
    INSERT INTO public.notifications (
      user_id,
      type,
      title,
      content,
      reference_id,
      reference_data
    ) VALUES (
      follower_record.follower_id,
      'blog_post',
      'New Blog Post',
      author_username || ' published: ' || NEW.title,
      NEW.id,
      jsonb_build_object(
        'author_id', NEW.author_id,
        'author_username', author_username,
        'post_title', NEW.title
      )
    );
  END LOOP;

  RETURN NEW;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_create_blog_post_notification') THEN
    CREATE TRIGGER trg_create_blog_post_notification
    AFTER INSERT ON public.blog_posts
    FOR EACH ROW EXECUTE FUNCTION public.create_blog_post_notification();
  END IF;
END;$$;

-- 6) Performance indexes to reduce fetch latency
CREATE INDEX IF NOT EXISTS idx_notifications_user_created_at
  ON public.notifications (user_id, created_at DESC);

CREATE INDEX IF NOT EXISTS idx_notifications_user_is_read
  ON public.notifications (user_id, is_read);

-- Note: Daily collection activity notifications are generated by
-- public.generate_collection_activity_notifications().
-- We'll schedule this after confirming the desired timezone and hour.